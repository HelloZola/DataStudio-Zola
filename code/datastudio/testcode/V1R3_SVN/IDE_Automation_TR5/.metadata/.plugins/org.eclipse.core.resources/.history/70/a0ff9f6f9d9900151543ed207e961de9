/*************************************************************************
TITLE - QUERY RESULT
DESCRIPTION - FUNCTIONS WITH RESPECT TO QUERY CONSOLE/RESULT WINDOW
AUTHORS - AWX321824
CREATED DATE - 16-NOV-2015
LAST UPDATED DATE - 16-NOV-2015
MODIFICATION HISTORY - 
TEST CASES COVERED - NA
*************************************************************************/
package script_library;

import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.InputStream;

import object_repository.ConsoleResultElements;
import object_repository.SaveAsElements;
import support_functions.BaseActions;
import autoitx4java.AutoItX;

public class QueryResult {

	 
    public static String ExportButton() throws Exception
{
    AutoItX x = new AutoItX();
    BaseActions.MouseClick(ConsoleResultElements.wConsoleResult, "", ConsoleResultElements.sMouseClick, ConsoleResultElements.sMouseButton, ConsoleResultElements.iClick, ConsoleResultElements.iResultxcord, ConsoleResultElements.iResultycord);
    Thread.sleep(1000);
    BaseActions.MouseClick(SaveAsElements.wResult, "", SaveAsElements.sMouseClick, SaveAsElements.sMouseButton, SaveAsElements.iClick, SaveAsElements.ixcord,SaveAsElements.iycord );
    Thread.sleep(1000);
    if(x.winExists(SaveAsElements.sSave))
    {
    	return "Success";
    }
    else
    {
    	return "Fail";
    }
}
    public static void SaveCsv(String sFilePath) throws Exception
{
	AutoItX x = new AutoItX();
	Robot r = new Robot();
	BaseActions.MouseClick(SaveAsElements.sSave, "", SaveAsElements.sSaveClick, SaveAsElements.sSaveButton, SaveAsElements.iClick, SaveAsElements.ix, SaveAsElements.iy);
	Thread.sleep(1000);
	x.send(sFilePath);
	Thread.sleep(1000);
	  	r.keyPress(KeyEvent.VK_ALT);
	    r.keyPress(KeyEvent.VK_S);
	    r.keyRelease(KeyEvent.VK_ALT);
	    r.keyRelease(KeyEvent.VK_S);
	    Thread.sleep(1000);    
	 if(x.winExists("File Overwrite Confirmation"))
	    {
	    	r.keyPress(KeyEvent.VK_ENTER);
	        r.keyRelease(KeyEvent.VK_ENTER);
	    }
	 FileInputStream fis=new FileInputStream(sFilePath);
	 fis.close();
	
   }
    public static String ReadConsoleOutput() throws Exception
    {
    	AutoItX x = new AutoItX();
    	Robot r = new Robot();
    	String sConsoleOutput;
    	Thread.sleep(2000);
    	BaseActions.MouseClick(ConsoleResultElements.wConsoleResult, "", ConsoleResultElements.sMouseClick, ConsoleResultElements.sMouseButton, ConsoleResultElements.iClick, ConsoleResultElements.iConsolexcord, ConsoleResultElements.iConsoleycord);
    	Thread.sleep(2000);
    	//x.controlFocus(ConsoleResultElements.wConsoleResult, "", ConsoleResultElements.sConsolePane);
    	r.keyPress(KeyEvent.VK_CONTROL);
        r.keyPress(KeyEvent.VK_A);
        r.keyRelease(KeyEvent.VK_CONTROL);
        r.keyRelease(KeyEvent.VK_A);
        r.keyPress(KeyEvent.VK_CONTROL);
        r.keyPress(KeyEvent.VK_C);
        r.keyRelease(KeyEvent.VK_CONTROL);
        r.keyRelease(KeyEvent.VK_C);
        Thread.sleep(1000);
        sConsoleOutput = x.clipGet();
    	return sConsoleOutput;
       }
    public static int RecordCount(String filename) throws Exception {
        
    	InputStream is = new BufferedInputStream(new FileInputStream(filename));
    	try {
    	byte[] c = new byte[1024];
    	int count = 1;
    	int readChars = 0;
    	boolean empty = true;
    	while ((readChars = is.read(c)) != -1) {
    	empty = false;
    	for (int i = 0; i < readChars; ++i) {
    	if (c[i] == '\n') {
    	++count;
    	}
    	}
    	}
    	return (count == 1 && !empty) ? 1 : count;
    	} finally {
    	is.close();
    	}
    	}    
    public static void EmptyTable() throws Exception
	{
		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_ALT);
		r.keyPress(KeyEvent.VK_V);
		r.keyRelease(KeyEvent.VK_ALT);
		r.keyRelease(KeyEvent.VK_V);
		r.keyPress(KeyEvent.VK_R);
		r.keyRelease(KeyEvent.VK_R);
		Thread.sleep(1000);
	}
    public static String EmptyTableValidation() throws Exception
    {
 	   	String sEmptyFlag;
    		Robot r = new Robot();
    		AutoItX x = new AutoItX();
    		
    		if(x.winExists("Internal Error")) 
    		{
    			sEmptyFlag = "Fail";
    		}
    
    		else
    		{
    			sEmptyFlag = "Pass";
    		}
    		Thread.sleep(1000);
    		r.keyPress(KeyEvent.VK_ENTER);
    		r.keyRelease(KeyEvent.VK_ENTER);
 		return sEmptyFlag;
    }
    public static String BulkQueryValidation() throws Exception
    {
 	   	String sQueryFlag;
   		AutoItX x = new AutoItX();
   		
   		if(x.winExists("Save As")) 
   		{
   			sQueryFlag = "Fail";
   		}
   
   		else
   		{
   			sQueryFlag = "Pass";
   		}
   		
   		Thread.sleep(1000);
   		BaseActions.Click("Save As", "", "Button2");
 		return sQueryFlag;
    }

}
