/*************************************************************************
TITLE - STATUS_BAR AND QUERY EXECUTION
DESCRIPTION - THIS PROGRAM COVERS THE BELOW TEST SCRIPTS
1.SDV_FUNCVAL_QUERYEXECSTATUS_STATUS_001--> Query execution using single query
2.SDV_FUNCVAL_QQUERYEXECSTATUS_MULTIPLEQUERY_002-->Query execution using multiple query
3.SDV_USAB_QUERYEXECSTATUS_PROPERMESSAGE_007-->Proper status message in console.
4.SDV_FIA_QUERYEXECSTATUS_TIME AND STATUS_008-->Execution status in status bar.
5.SDV_FUNCERR_QUERYEXECSTATUS_INVALIDQUERY_003-->Execution status in status bar for invalid query.
6.SDV_SECU_QUERYEXECSTATUS_NOACCESS_007-->Execution status for not accessible query 
TEST CASES COVERED - REFER IDE_Functional_Test_Data.xlsx IN TEST DATA FOLDER
*************************************************************************/


package test_scripts;

import java.io.File;

import script_library.Login;
import script_library.QueryEditor;
import support_functions.BaseActions;
import support_functions.UtilityFunctions;

import com.jacob.com.LibraryLoader;

public class AR_Tools_IDE_030_004_EXE_STS_001 {
       public static void main(String args[]) throws Exception{
              File Jacob = new File("lib", "jacob-1.18-x86.dll");
              System.setProperty(LibraryLoader.JACOB_DLL_PATH,Jacob.getAbsolutePath()); 
              //Creating the Test Result File for Reporting
              String ResultExcel = UtilityFunctions.CreateResultFile("FunctionalTest");
              String sFlag, sInputQuery,sQueryType;
              //Launching the IDE Tool Application
              Login.LaunchIDE("C:/Project_DB_Tool_Automation_Suite/IDE/IDE_Tool/Gauss200 OLAP IDE.exe");
              Thread.sleep(1000);
              String sConnection=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "DBLogin", 1, 0);
             String sHost=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "DBLogin", 1, 1);
              String sHostPort=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "DBLogin", 1, 2);
              String sDBName=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "DBLogin", 1, 3);
              String sUserName=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "DBLogin", 1, 4);
              Thread.sleep(1000);
              String sPassword=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "DBLogin", 1, 5);
              Thread.sleep(1000);
              Login.IDELogin(sConnection,sHost,sHostPort,sDBName,sUserName,sPassword);
              //BaseActions.ComboBox("Gauss200 OLAP IDE", "", "ComboBox1");
              int iRowCount = UtilityFunctions.GetRowCount("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004");
              System.out.println("the count is"+iRowCount);
              //loop execution for valid query 
              for(int i=1;i<=iRowCount-2;i++)
              {
                     sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004", i,2 );
                     sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004", i,3 );
                     sFlag = QueryEditor.SingleQueryExe(sInputQuery,sQueryType);
                     BaseActions.ClearConsole();
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,3,"Yes");
                     if (sFlag == "Success")
                     {
                           UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,4,"pass");
                     }
                     else
                     {
                           UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,4,"fail");
                            UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,5,"Mismatching Result");
                     }
              }
              //execution for invalid query
              sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004", 5,2 );
              sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004", 5,3 );
              sFlag = QueryEditor.SingleQueryExe(sInputQuery,sQueryType);
              BaseActions.ClearConsole();
              UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",7,3,"Yes");
              if(sFlag.contains("does not exist"))
              {
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",7,4,"pass");
              }
              else
              {
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",7,4,"Fail");
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",7,5,"Mismatching Result");
              }
              //execution for invalid query
              sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004", 6,2 );
              sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.030.004", 6,3 );
              sFlag = QueryEditor.SingleQueryExe(sInputQuery,sQueryType);
              BaseActions.ClearConsole();
              UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",8,3,"Yes");
              if(sFlag.contains("permission denied"))
              {
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",8,4,"Pass");
              }
              else
              {
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",8,4,"Fail");
                     UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",8,5,"Mismatching Result");
              }      
       }
       
}
