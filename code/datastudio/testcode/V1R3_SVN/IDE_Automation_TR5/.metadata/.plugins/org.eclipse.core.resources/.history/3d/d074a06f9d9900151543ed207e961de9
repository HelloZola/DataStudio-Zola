/*************************************************************************
TITLE - SMOKE TEST AUTOMATION SUITE
DESCRIPTION - THIS AUTOMATION SUITE COVERS THE SMOKE TEST CASES-
-BASED ON EACH DROP
AUTHORS - AWX321822, AWX321824
CREATED DATE - 18-NOV-2015
LAST UPDATED DATE - 24-NOV-2015
TEST CASES COVERED - REFER IDE_Smoke_Test_Data.xlsx IN TEST DATA FOLDER
*************************************************************************/


package smoke_test;

import java.io.File;

import script_library.Login;
import script_library.QueryEditor;
import script_library.QueryResult;
import support_functions.UtilityFunctions;

import com.jacob.com.LibraryLoader;

public class SmokeTestAutomation {
	
	public static void main(String args[]) throws Exception
	{
	File Jacob = new File("lib", "jacob-1.18-x86.dll");
	System.setProperty(LibraryLoader.JACOB_DLL_PATH,Jacob.getAbsolutePath()); 
	//Creating the Test Result File for Reporting
	String ResultExcel = UtilityFunctions.CreateResultFile("SmokeTest");
	String sFlag, sWindowFlag, sInputQuery,sFormatType,sTestCaseID,sQueryType,sExeType,iQueryCount,sQuerySelection;
	//Launching the IDE Tool Application
	Login.LaunchIDE("C:/Project_DB_Tool_Automation_Suite/IDE/IDE_Tool/Gauss200 OLAP IDE.exe");
	Thread.sleep(1000);
		
	//Getting Login Credentials from IDE_Smoke_Test_Data file and user logs into IDE Tool
	String sConnection=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "IDELogin", 1, 0);
	String sHost=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "IDELogin", 1, 1);
	String sHostPort=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "IDELogin", 1, 2);
	String sDBName=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "IDELogin", 1, 3);
	String sUserName=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "IDELogin", 1, 4);
	String sPassword=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "IDELogin", 1, 5);
	Login.IDELogin(sConnection,sHost,sHostPort,sDBName,sUserName,sPassword);
	
	//Scripts to Test AR.Tools.IDE.020.007 - Query Format through Menu, Tool bar and Shortcut options
	int iRowCount = UtilityFunctions.GetRowCount("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.020.007");
	for(int i=1;i<=iRowCount;i++)
	{
		sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,1 );
		sFormatType=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,2 );
		sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,3 );
		String sExpectedQuery=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,4);
		String sFormat[] = sExpectedQuery.split(",");
		Thread.sleep(2000);
		QueryEditor.QueryFormat(sInputQuery,sFormatType);
		Thread.sleep(1000);
		sFlag = QueryEditor.QueryFormatValidation(sFormat, sInputQuery);
		Thread.sleep(1000);
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,3,"Yes");
		if (sFlag == "Mismatch")
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,5,"Mismatch in Expected and Actual Formated Query");
			UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
		}
		else
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,4,"Pass");
		}
	}
	
	//Scripts to Test AR.Tools.IDE.030.004 - Query execution status on status bar
	iRowCount = UtilityFunctions.GetRowCount("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.004");
	for(int i=1;i<=iRowCount;i++)
	{
		sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,1 );
		sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.004", i,2 );
		sFlag = QueryEditor.SingleQueryExe(sInputQuery,"Valid");
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,3,"Yes");
		if (sFlag == "Success")
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,4,"Pass");
		}
		else
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.004",i+2,5,sFlag);
			UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
		}
	}
	
	//Scripts to Test AR.Tools.IDE.040.003 - Export to CSV validation
	sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.040.003", 1,2 );
	sFlag = QueryEditor.SingleQueryExe(sInputQuery,"Valid");
	UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,3,"Yes");
	if (sFlag == "Success")
	{
		Thread.sleep(1000);
		sWindowFlag = QueryResult.ExportButton();
		Thread.sleep(1000);
		if (sWindowFlag == "Success")
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,4,"Pass");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,3,"Yes");
			QueryResult.SaveCsv("C:\\Project_DB_Tool_Automation_Suite\\IDE\\IDE_Test_Results\\Output_Files\\ExportResult.csv");
			Thread.sleep(1000);
			int RecordCount = QueryResult.RecordCount("C:\\Project_DB_Tool_Automation_Suite\\IDE\\IDE_Test_Results\\Output_Files\\ExportResult.csv");
			String sConsoleOutput = QueryResult.ReadConsoleOutput();
			String[] ConsoleOutputArray = sConsoleOutput.split("[INFO]");
			if (ConsoleOutputArray[(ConsoleOutputArray.length)-6].contains(String.valueOf(RecordCount-2)))
			{
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Pass");
			}
			else
			{
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Fail");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,5,"Displayed record count and saved record count in csv are mismatching.");
				sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.040.003", 4,1 );
				UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
			}	
		}
		else
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,5,"Export to CSV window did not get displayed.");
			sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.040.003", 3,1 );
			UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,5,"Export to CSV window did not get displayed.");
			sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.040.003", 4,1 );
			UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
		}
	}		
	else
	{
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,4,"Fail");
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,5,"Query did not get executed successfully.");
		sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.040.003", 3,1 );
		UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Fail");
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,5,"Query did not get executed successfully.");
		sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.040.003", 4,1 );
		UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
	}
	
	//Scripts to Test AR.Tools.IDE.030.002 - Support multiple query execution from one sql editor
	
	iRowCount = UtilityFunctions.GetRowCount("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002");
	for(int i=1;i<=iRowCount;i++)
	{
		sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002", i,2);
		sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002", i,3);
		sExeType=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002", i,4);
		iQueryCount=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002", i,5);
		sQuerySelection=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002", i,6);
		
		sFlag = QueryEditor.MultipleQueryExe(sInputQuery,sQueryType,sExeType,iQueryCount,sQuerySelection);
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.002",i+2,3,"Yes");
		if(sFlag.equals("Success"))
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.002",i+2,4,"Pass");
		else
		{
			sTestCaseID=UtilityFunctions.GetExcelCellValue("IDE_Smoke_Test_Data.xlsx", "AR.Tools.IDE.030.002", i,1 );
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.002",i+2,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.030.002",i+2,5,"Error occured while executing the query. Please refer screenshot "+sTestCaseID+".jpg");
			UtilityFunctions.TakeScreenshot(sTestCaseID, ResultExcel);
		}
	}
	
	//Logout from IDE tool and close the window.
	//Login.IDELogout();
	}//End of Main
}//End of Class
	


