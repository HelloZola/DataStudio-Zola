/*************************************************************************
TITLE - EXPORT QUERY RESULT
DESCRIPTION - THIS PROGRAM COVERS THE BELOW TEST SCRIPTS
1.SDV_FUNVAL_PLIDE_RSLTWDW_EXPORT_001-->Export query result to CSV file in the desired location.
2.SDV_FUNVAL_PLIDE_RSLTWDW_EXPORT_003-->Export query result to CSV file from the icon
3.SDV_FIA_PLIDE_RSLTWDW_EXPORT_010-->Export query result Documentation.
4.SDV_FIA_PLIDE_RSLTWDW_EXPORT_010_587-->Export query result from Object browser.
5.SDV_FUNVAL_PLIDE_RSLTWDW_EXPORT_004-->Export query result after moving to different page.
6.SDV_FUNVAL_PLIDE_RSLTWDW_EXPORT_002-->Export zero records to csv file from the icon
7.SDV_FUNVAL_PLIDE_RSLTWDW_EXPORT_005-->Export query result in progress.
TEST CASES COVERED - REFER IDE_Functional_Test_Data.xlsx IN TEST DATA FOLDER
*************************************************************************/

package test_scripts;

import java.io.File;

import script_library.Login;
import script_library.ObjectBrowserToolBar;
import script_library.QueryEditor;
import script_library.QueryResult;
import support_functions.BaseActions;
import support_functions.UtilityFunctions;

import com.jacob.com.LibraryLoader;

public class AR_Tools_IDE_040_003_EXP_CSV_001 {
	
	public static void main(String args[]) throws Exception
	{

		File Jacob = new File("lib", "jacob-1.18-x86.dll");
		System.setProperty(LibraryLoader.JACOB_DLL_PATH,Jacob.getAbsolutePath());
		String sFlag, sWindowFlag, sInputQuery,sHelpFlag,sEmptyFlag,sResult,sQueryType;
		String ResultExcel = UtilityFunctions.CreateResultFile("FunctionalTest");
		//Launching the IDE Tool Application
		Login.LaunchIDE("C:/Project_DB_Tool_Automation_Suite/IDE/IDE_Tool/Gauss200 OLAP IDE.exe");
		Thread.sleep(1000);
		//Getting Login Credentials from IDE_Functional_Test_Data file and user logs into IDE Tool
		String sConnection=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 0);
		String sHost=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 1);
		String sHostPort=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 2);
		String sDBName=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 3);
		String sUserName=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 4);
		String sPassword=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 5);
		Login.IDELogin(sConnection,sHost,sHostPort,sDBName,sUserName,sPassword);
	
		sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.040.003", 1,2 );
		sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.040.003", 1,3 );
		Thread.sleep(1000);
		sFlag = QueryEditor.SingleQueryExe(sInputQuery,sQueryType);
	
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,3,"Yes");
		if (sFlag == "Success")
			{
			Thread.sleep(1000);
			//Export query result after moving to different page in result window.
			BaseActions.MouseClick("Gauss200 OLAP IDE", "", "SWT_Window015", "left", 1, 101, 12);
			Thread.sleep(1000);
			UtilityFunctions.ScrollDown("Gauss200 OLAP IDE", "", "SysListView321", 30);
			sWindowFlag = QueryResult.ExportButton();
			Thread.sleep(1000);
			if (sWindowFlag == "Success")
				{
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,4,"Pass");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,3,"Yes");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",7,3,"Yes");
				
				QueryResult.SaveCsv("C:\\Project_DB_Tool_Automation_Suite\\IDE\\IDE_Test_Results\\Output_Files\\ExportResult.csv");
				Thread.sleep(1000);
				int RecordCount = QueryResult.RecordCount("C:\\Project_DB_Tool_Automation_Suite\\IDE\\IDE_Test_Results\\Output_Files\\ExportResult.csv");
				String sConsoleOutput = QueryResult.ReadConsoleOutput();
				String[] ConsoleOutputArray = sConsoleOutput.split("[INFO]");
				if (ConsoleOutputArray[(ConsoleOutputArray.length)-6].contains(String.valueOf(RecordCount-2)))
					{
					UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Pass");
					UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",7,4,"Pass");
					}
				else
					{
					UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Fail");
					UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",7,4,"Fail");
					UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",7,5,"Displayed record count and saved record count in csv are mismatching.");
					UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,5,"Displayed record count and saved record count in csv are mismatching.");
					}	
				}
			else
				{
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,4,"Fail");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,5,"Export to CSV window did not get displayed.");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Fail");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,5,"Export to CSV window did not get displayed.");
				}
			}	
		else
			{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",3,5,"Query did not get executed successfully.");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",4,5,"Query did not get executed successfully.");
			}	
	
		//Exporting the table data from the Object Browser
		ObjectBrowserToolBar.ObjectBrowser();
		ObjectBrowserToolBar.BrowserExport();
		QueryResult.SaveCsv("C:\\Project_DB_Tool_Automation_Suite\\IDE\\IDE_Test_Results\\Output_Files\\BrowserExportResult.csv");
		String sConsoleOutput = QueryResult.ReadConsoleOutput();
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",5,3,"Yes");
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",6,3,"Yes");
		if(sConsoleOutput.contains("successfully exported"))
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",5,4,"Pass");
		}
		
		else
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",5,4,"Fail");
		}
		
		//Empty table export
		QueryResult.EmptyTable();
		sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.040.003", 4,2 );
		sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.040.003", 4,3 );
		sFlag = QueryEditor.SingleQueryExe(sInputQuery,sQueryType);
		QueryResult.ExportButton();
		QueryResult.SaveCsv("C:\\Project_DB_Tool_Automation_Suite\\IDE\\IDE_Test_Results\\Output_Files\\EmptyTableExportResult.csv");
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",8,3,"Yes");
		sEmptyFlag = QueryResult.EmptyTableValidation();
		if(sEmptyFlag.equals("Pass"))
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",8,4,"Pass");	
			
		}
	
		else
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",8,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",8,5,"Export Failed due to internal Error-java.lang.NullpointerException");
			
		}
		//Script to get the HelpGuide
		sHelpFlag=ObjectBrowserToolBar.HelpButton();
		if(sHelpFlag=="True")
			{
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",6,4,"Fail");
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",6,5,"The Help Document is not available");
							
			}
						
		else
			{
				UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",6,4,"Pass");

			}
		//Exporting the data while the execution in progress
		
		sInputQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.040.003", 5,2 );
		sQueryType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.040.003", 5,3 );
		Thread.sleep(1000);
		QueryEditor.SingleQueryExe(sInputQuery,sQueryType);
		QueryResult.ExportButton();
		sResult = QueryResult.BulkQueryValidation();
		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",9,3,"Yes");
		if(sResult=="Pass")
		{
			
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",9,4,"Pass");
		}
		else
		{
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",9,4,"Fail");
			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.040.003",9,5,"The Save button is active when Query exceution is in progress");
		}
		
	}	

	
	
}
