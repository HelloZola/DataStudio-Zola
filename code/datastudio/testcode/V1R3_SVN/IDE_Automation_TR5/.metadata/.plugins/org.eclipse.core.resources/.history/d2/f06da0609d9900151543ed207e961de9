/*************************************************************************
TITLE - QUERY FORMAT
DESCRIPTION - THIS PROGRAM COVERS THE BELOW TEST SCRIPTS
1.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_001-->Formatting the  query using Menu Option.
2.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_002-->Formatting the  query using Menu Option.
3.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_003-->Formatting the  query using Shortcut.
4.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_004-->Formatting the  query using Shortcut.
5.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_005-->Formatting the  query using ToolBar.
6.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_006-->Formatting the  query using ToolBar.
7.SDV_FUNERRL_PLIDE_SQLDEVOPE_FRMT_015-->Formatting the  query using Enter.
8.SDV_FUNCVAL_PLIDE_SQLDEVOPE_FRMT_021-->Formatting the  query using Menu Option.
9.SDV_FUNERRL_PLIDE_SQLDEVOPE_FRMT_023-->Formatting the  query using Shortcut.
TEST CASES COVERED - REFER IDE_Functional_Test_Data.xlsx IN TEST DATA FOLDER
*************************************************************************/

package test_scripts;

import java.io.File;

import script_library.Login;
import script_library.QueryEditor;
import support_functions.UtilityFunctions;

import com.jacob.com.LibraryLoader;

public class AR_Tools_IDE_020_007_QRY_FMT {
	public static void main(String args[]) throws Exception
    {
		File Jacob = new File("lib", "jacob-1.18-x86.dll");
	       System.setProperty(LibraryLoader.JACOB_DLL_PATH,Jacob.getAbsolutePath()); 
	     //Creating the Test Result File for Reporting
	   		String ResultExcel = UtilityFunctions.CreateResultFile("FunctionalTest");
	   		String sFlag, sQuery;
	   			//Launching the IDE Tool Application
	              Login.LaunchIDE("C:/Project_DB_Tool_Automation_Suite/IDE/IDE_Tool/Gauss200 OLAP IDE.exe");
	              Thread.sleep(1000);
	              //Getting Login Credentials from IDE_Smoke_Test_Data file and user logs into IDE Tool
	              String sConnection=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 0);
	              String sHost=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 1);
	              String sHostPort=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx","IDELogin", 1, 2);
	              String sDBName=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 3);
	              String sUserName=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 4);
	              Thread.sleep(2000);        
	              String sPassword=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "IDELogin", 1, 5);
	              Login.IDELogin(sConnection,sHost,sHostPort,sDBName,sUserName,sPassword);  
	            //Scripts to Test AR.Tools.IDE.020.007 - Query Format,Validation check through Menu, Tool bar and Shortcut options
	              int iRowCount = UtilityFunctions.GetRowCount("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.020.007");
	              
	          	for(int i=1;i<=iRowCount;i++)
	          	{
	          		String sFormatType=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,2 );
	          		sQuery = UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,3 );
	          	    String sExpectedQuery=UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,4);
	          		String sFormat[] = sExpectedQuery.split(",");
	          		Thread.sleep(2000);
	          		QueryEditor.QueryFormat(sQuery,sFormatType);
	          		Thread.sleep(1000);
	          		sFlag = QueryEditor.QueryFormatValidation(sFormat, sQuery);
	        		Thread.sleep(1000);
	        		System.out.println(UtilityFunctions.GetExcelCellValue("IDE_Functional_Test_Data.xlsx", "AR.Tools.IDE.020.007", i,1 ));
	        		System.out.println(sFlag);
	        		UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,3,"Yes");
	        		
        		if (sFlag == "Mismatch")
	        		{
	        			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,4,"Fail");
	        			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,5,"Mismatch in Expected and Actual Formated Query");
	        			
	        		}
	        		else
	        		{
	        			UtilityFunctions.WriteToExcel(ResultExcel,"AR.Tools.IDE.020.007",i+2,4,"Pass");
	        			
	        		}
	        	}
                 }
}

